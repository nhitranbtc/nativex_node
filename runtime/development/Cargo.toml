[package]
name = "development-runtime"
version = "4.0.0-dev"
description = "A fresh FRAME-based Substrate node, ready for hacking."
build = "build.rs"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
repository.workspace = true

# [package.metadata.docs.rs]
# targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
#third-party dependenciesmm
codec = { workspace = true } 
static_assertions ={ workspace = true } 
log = { workspace = true }
serde_json = { features = ["alloc", "arbitrary_precision"], workspace = true }
scale-info = { version = "2.11.1", default-features = false, features = ["derive", "serde"] }

primitive-types = { workspace = true }

# primitives
sp-core = { workspace = true }
sp-io = { workspace = true }
sp-runtime = { workspace = true }
sp-std = { workspace = true }
sp-version = { workspace = true }
sp-authority-discovery = { workspace = true }
sp-consensus-babe = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-block-builder = { workspace = true }
sp-api = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-session = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-staking = { workspace = true }
sp-genesis-builder = { workspace = true }

# frame dependencies
frame-executive = { workspace = true }
frame-support = { workspace = true }
frame-system = { workspace = true }
frame-election-provider-support = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }

# Used for runtime benchmarking
array-bytes = { workspace = true }
frame-benchmarking = { workspace = true, optional = true }
frame-system-benchmarking = { workspace = true , optional = true }
# try-runtime
frame-try-runtime = { workspace = true, optional = true }

pallet-assets = { workspace = true }
pallet-aura = { workspace = true }
pallet-authority-discovery = { workspace = true }
pallet-authorship = { workspace = true }
pallet-alliance = { workspace = true }
pallet-asset-rate = { workspace = true }
#pallet-asset-conversion = { workspace = true }
pallet-babe = { workspace = true }
pallet-balances = { workspace = true }
pallet-bags-list = { workspace = true }
pallet-bounties = { workspace = true }
pallet-child-bounties = { workspace = true }
pallet-collective = { workspace = true }
pallet-contracts = { workspace = true }
pallet-conviction-voting = { workspace = true }
pallet-core-fellowship = { workspace = true }
pallet-election-provider-multi-phase = { workspace = true }
pallet-elections-phragmen = { workspace = true }
pallet-democracy = { workspace = true }
pallet-fast-unstake = { workspace = true }
pallet-glutton = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-identity = { workspace = true }
pallet-im-online = { workspace = true }
pallet-indices = { workspace = true }
pallet-insecure-randomness-collective-flip = { workspace = true }
pallet-lottery = { workspace = true }
pallet-membership = { workspace = true }
pallet-message-queue = { workspace = true }
pallet-multisig = { workspace = true }
pallet-mmr = { workspace = true }
pallet-nfts = { workspace = true }
pallet-nomination-pools = { workspace = true }
pallet-nomination-pools-runtime-api = { workspace = true }
pallet-nis = { workspace = true }
pallet-node-authorization = {workspace = true }
pallet-ranked-collective = { workspace = true }
pallet-recovery = { workspace = true }
pallet-referenda = { workspace = true }
pallet-remark = { workspace = true }
pallet-root-testing = { workspace = true }
pallet-offences = { workspace = true }
pallet-preimage = { workspace = true }
pallet-proxy = { workspace = true }
pallet-session = { workspace = true }
pallet-salary = { workspace = true }
pallet-society = { workspace = true }
pallet-staking-reward-curve = { workspace = true }
pallet-staking = { workspace = true }
pallet-state-trie-migration = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-sudo = { workspace = true }
pallet-tips= { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-storage = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-asset-tx-payment = { workspace = true }
pallet-treasury = { workspace = true }
pallet-utility = { workspace = true }
pallet-uniques = { workspace = true }
pallet-whitelist = { workspace = true }
pallet-vesting = { workspace = true }


# Local Dependencies
pallet-template = { workspace = true }
runtime-common = { workspace = true }
common-primitives = { workspace = true }

# chain-extensions
nativex-rand-extension = { workspace = true }


[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[features]
default = ["std"]
std = [
	"codec/std",
	"scale-info/std",
	"sp-genesis-builder/std",
	"frame-benchmarking?/std",
	"frame-election-provider-support/std",
	"frame-executive/std",
	"frame-support/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime/std",
	"frame-try-runtime?/std",
	"substrate-wasm-builder",


	"pallet-assets/std",

	"pallet-aura/std",
	"pallet-authority-discovery/std",
	"pallet-authorship/std",
	"pallet-alliance/std",
	"pallet-asset-rate/std",
	"pallet-babe/std",
	"pallet-balances/std",
	"pallet-bags-list/std",
	"pallet-bounties/std",
	"pallet-collective/std",
	"pallet-contracts/std",
	"pallet-conviction-voting/std",
	"pallet-core-fellowship/std",
	"pallet-child-bounties/std",
	"pallet-election-provider-multi-phase/std",
	"pallet-elections-phragmen/std",
	"pallet-democracy/std",
	"pallet-fast-unstake/std",
	"pallet-glutton/std",
	"pallet-grandpa/std",
	"pallet-identity/std",
	"pallet-indices/std",
	"pallet-im-online/std",
	"pallet-insecure-randomness-collective-flip/std",
	"pallet-lottery/std",
	"pallet-multisig/std",
	"pallet-membership/std",
	"pallet-message-queue/std",
	"pallet-mmr/std",
	"pallet-nfts/std",
	"pallet-nomination-pools/std",
	"pallet-nomination-pools-runtime-api/std",
	"pallet-nis/std",
	"pallet-node-authorization/std",
	"pallet-offences/std",
	"pallet-preimage/std",
	"pallet-proxy/std",
	"pallet-ranked-collective/std",
	"pallet-recovery/std",
	"pallet-referenda/std",
	"pallet-remark/std",
	"pallet-root-testing/std",
	"pallet-session/std",
	"pallet-salary/std",
	"pallet-society/std",
	"pallet-staking/std",
	"pallet-state-trie-migration/std",
	"pallet-scheduler/std",
	"pallet-sudo/std",

	"pallet-tips/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-transaction-storage/std",
	"pallet-asset-tx-payment/std",
	"pallet-treasury/std",
	"pallet-utility/std",
	"pallet-uniques/std",
	"pallet-whitelist/std",
	"pallet-vesting/std",

	"sp-authority-discovery/std",
	"sp-core/std",
	"sp-io/std",
	"sp-runtime/std",
	"sp-version/std",
	"sp-std/std",
	"sp-api/std",
	"sp-block-builder/std",
	"sp-consensus-babe/std",
	"sp-consensus-aura/std",
	"sp-consensus-grandpa/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-session/std",
	"sp-staking/std",
	"sp-transaction-pool/std",

	"pallet-template/std",
	"runtime-common/std",
	"common-primitives/std",
	"nativex-rand-extension/std",
]
# Enable metadata hash generation at compile time for the `CheckMetadataHash` extension
metadata-hash = ["substrate-wasm-builder?/metadata-hash"]

runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	#"pallet-template/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
]
try-runtime = [
	"frame-try-runtime/try-runtime",
	"frame-executive/try-runtime",
	"frame-system/try-runtime",
	"frame-support/try-runtime",
	"pallet-aura/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-sudo/try-runtime",
	#"pallet-template/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
]
